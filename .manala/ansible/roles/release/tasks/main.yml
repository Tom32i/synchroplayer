---

- name: git > Get url
  shell: >
    git config --get remote.origin.url
  args:
    chdir: "{{ release_git_dir }}"
  tags: log_failed
  register: __release_git_url

- name: git > Get informations
  git:
    repo: "{{ __release_git_url.stdout }}"
    dest: "{{ release_git_dir }}"
    clone: false
    update: false
  register: __release_git

- name: Release directory "{{ release_dir }}"
  shell: >
    rm --recursive --force {{ release_dir }}
    && mkdir -p {{ release_dir }}
  args:
    warn: false
  tags: log_failed

- name: git > Export repository
  shell: >
    git archive HEAD{{
      ' ' ~ release_target_dir if (release_target_dir) else ''
    }}
    | tar -x -C {{ release_dir }}{{
        ' ' ~ release_target_dir
        ~ ' --strip-components=' ~ release_target_dir.split('/')|length
          if (release_target_dir) else
        ''
    }}
  args:
    chdir: "{{ release_git_dir }}"
  tags: log_failed

- name: tasks
  include_tasks: task/{{ item.task }}.yml
  loop: "{{ query('release_tasks', release_tasks) }}"
  when: item.when

- name: git > Init "{{ release_repo }}" on branch "{{ release_version }}"
  shell: >
    git init
    && git checkout -b {{ release_version }}
    && git remote add origin {{ release_repo }}
    && git fetch
    && (
      git show-ref -q origin/{{ release_version }} ; rc=$? ;
      if [ $rc -eq 0 -o $rc -eq 1 ] ; then
        if [ $rc -eq 0 ] ; then
          git update-ref HEAD origin/{{ release_version }} ;
        fi ;
      else
        return $rc ;
      fi
    )
  args:
    chdir: "{{ release_dir }}"
  tags: log_failed

- name: Remove
  shell: >
    rm --recursive --force {{ [release_dir, item]|join('/') }}
  args:
    warn: false
  tags: log_failed
  loop: "{{ release_removed }}"

- name: git > Add all
  shell: >
    git add --force --all
  args:
    chdir: "{{ release_dir }}"
  when: release_add|length == 0
  tags: log_failed

- name: git > Add
  shell: >
    git add --force {{ item }}
  args:
    chdir: "{{ release_dir }}"
  loop: "{{ release_add }}"
  tags: log_failed

- name: git > Commit
  shell: |
    git commit --allow-empty -m "{{
      ansible_date_time.year
      ~ ansible_date_time.month
      ~ ansible_date_time.day
      ~ ansible_date_time.hour
      ~ ansible_date_time.minute
      ~ ansible_date_time.second
    }}
    Original commit: https://{{
      __release_git_url.stdout|regex_replace(release_git_url_regex, '\g<host>/\g<user>/\g<repository>')
    }}/commit/{{ __release_git.after }}"
  args:
    chdir: "{{ release_dir }}"
  tags: log_failed

- name: git > Push "{{ release_version }}"
  shell: >
    git push --set-upstream origin {{ release_version }}
    && git push origin HEAD
  args:
    chdir: "{{ release_dir }}"
  tags: log_failed
