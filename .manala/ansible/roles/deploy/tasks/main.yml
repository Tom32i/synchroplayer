---

# Setup
- name: setup > Create structure
  deploy_helper:
    path:          "{{ deploy_dir }}"
    current_path:  "{{ deploy_current_dir }}"
    releases_path: "{{ deploy_releases_dir }}"
    shared_path:   "{{ deploy_shared_dir }}"
    keep_releases: "{{ deploy_releases }}"
    state:         present

# Strategy
- name: strategy
  include_tasks: "strategy/{{ deploy_strategy }}.yml"

# Unfinished
- name: unfinished > Add an unfinished file, to allow cleanup on successful finalize
  file:
    path:  "{{ deploy_helper.new_release_path }}/{{ deploy_helper.unfinished_filename }}"
    state: touch

# Shared
- import_tasks: shared.yml

# Copied
- name: copied > Stat
  stat:
    path: "{{ deploy_helper.previous_release_path ~ '/' ~ item }}"
  register: __deploy_copied_stats_output
  with_items: "{{ deploy_copied }}"

- name: copied > Copy
  shell: >
    cp -R {{ deploy_helper.previous_release_path ~ '/' ~ item.1 ~ (__deploy_copied_stats_output.results[item.0].stat.isdir|ternary('/', '')) }}
    {{ deploy_helper.new_release_path ~ '/' ~ item.1 }}
  delegate_to: "{{ inventory_hostname }}"
  with_indexed_items: "{{ deploy_copied }}"
  when: __deploy_copied_stats_output.results[item.0].stat.exists
  tags: log_failed

# Writable - Dirs
- import_tasks: writable/dirs.yml

# Tasks
- name: tasks
  include_tasks: task/{{ item.task }}.yml
  loop: "{{ query('deploy_tasks', deploy_tasks) }}"
  when: item.when

# Removed
- name: removed > Files
  file:
    path:  "{{ deploy_helper.new_release_path ~ '/' ~ item }}"
    state: absent
  with_items: "{{ deploy_removed }}"

# Finalize
- name: finalize > Remove the unfinished file and create a symlink to the newly deployed release
  deploy_helper:
    path:          "{{ deploy_dir }}"
    current_path:  "{{ deploy_current_dir }}"
    releases_path: "{{ deploy_releases_dir }}"
    release:       "{{ deploy_helper.new_release }}"
    keep_releases: "{{ deploy_releases }}"
    state:         finalize
    clean:         false

# Clean
- name: clean > Remove failed and old releases, keeping "{{ deploy_releases }}" releases
  deploy_helper:
    path:          "{{ deploy_dir }}"
    current_path:  "{{ deploy_current_dir }}"
    releases_path: "{{ deploy_releases_dir }}"
    release:       "{{ deploy_helper.new_release }}"
    keep_releases: "{{ deploy_releases }}"
    state:         clean
  ignore_errors: true

# Post tasks
- name: post tasks
  include_tasks: task/{{ item.task }}.yml
  loop: "{{ query('deploy_tasks', deploy_post_tasks) }}"
  when: item.when
